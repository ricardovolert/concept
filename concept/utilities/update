#!/usr/bin/env bash

# This file is part of CO𝘕CEPT, the cosmological 𝘕-body code in Python.
# Copyright © 2015–2018 Jeppe Mosgaard Dakin.
#
# CO𝘕CEPT is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CO𝘕CEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CO𝘕CEPT. If not, see http://www.gnu.org/licenses/
#
# The author of CO𝘕CEPT can be contacted at dakin(at)phys.au.dk
# The latest version of CO𝘕CEPT is available at
# https://github.com/jmd-dk/concept/



# This utility will update the CO𝘕CEPT source files.
# You can run this file directly as
# utilities/update version [--reinstall]
# or invoke it via the concept script as
# ./concept -u update version [--reinstall]



# Absolute paths to this file and its directory
this_file="$(readlink -f "${BASH_SOURCE[0]}")"
this_dir="$(dirname "${this_file}")"

# Source the concept script
source "${this_dir}/../concept"

# Set up error trapping
ctrl_c(){
    trap : 0
    exit 2
}
abort(){
    exit_code=$?
    colorprint "An error occurred while using the \"$(basename "${this_file}")\" utility!" "red"
    exit ${exit_code}
}
if [ "${called_from_concept}" == "True" ]; then
    trap 'ctrl_c' SIGINT
    trap 'abort' EXIT
    set -e
fi

# Use Python's argparse module to handle command-line arguments
argparse_finished="no"
argparse_exit_code=""
args=$("${python}" -B -c "
import argparse, sys
# Setup command-line arguments
parser = argparse.ArgumentParser(
    prog='$(basename "${this_file}")',
    description='Run the CO𝘕CEPT $(basename "${this_file}") utility',
)
parser.add_argument(
    'version',
    help=(
        'version to update to. You may specify a release version '
        '(e.g. 0.1.0), the master version or a GitHub commit hash '
        '(e.g. cf3c210e12527691433f960e7d27249a545fb320).'
    ),
)
parser.add_argument(
    '--reinstall',
    default=False,
    action='store_true',
    help='install requested version even when it equals the current version',
)
# Enables Python to write directly to screen (stderr)
# in case of help request.
stdout_copy = sys.stdout
sys.stdout = sys.stderr
# Now do the actual argument parsing,
# including writing out the help message.
if '${called_from_concept}' == 'True':
    # Called from concept - Throw exception on illegal args
    args = parser.parse_args()
else:
    # Called directly - Allow what appears to be illegal args
    # (these might be known to the concept script).
    args, unknown_args = parser.parse_known_args()
# Reset stdout
sys.stdout = stdout_copy
# Print out the arguments.
# These will be captured in the Bash 'args' variable.
print('argparse_finished=yes')
print('version=\"{}\"'.format(args.version))
print('reinstall=\"{}\"'.format(args.reinstall))
" "$@" || echo "argparse_exit_code=$?")
# Evaluate the handled arguments into this scope
eval "${args}"
# Exit if argparse exited without finishing
if [ "${argparse_finished}" != "yes" ]; then
    if [ -z "${argparse_exit_code}" ]; then
        argparse_exit_code=0
    fi
    if [ ${argparse_exit_code} -eq 0 ]; then
        trap : 0
    fi
    exit ${argparse_exit_code}
fi

# If not called indirectly through the concept script,
# call the concept script now.
if [ "${called_from_concept}" != "True" ]; then
    "${concept}" -u="${this_file}" "$@"
    trap : 0
    exit 0
fi

# Determine the current CO𝘕CEPT version
current_version="$("${concept}" -m "import commons; print(commons.__version__)" \
    --local --pure-python | tail -n 1 || :)"

# If the current CO𝘕CEPT version is already the requested version,
# do nothing unless the --reinstall option was passed.
if [[ "${current_version}" == *"."* ]]; then
    if [[ "${current_version}" != "v"* ]]; then
        current_version="v${current_version}"
    fi
fi
if [ "${version}" == "${current_version}" ] && [ "${version}" != "master" ]; then
    echo "CO𝘕CEPT version \"${version}\" already installed."
    if [ "${reinstall}" == "True" ]; then
        echo "A reinstallation will take place."
    else
        echo "If you wish to reinstall this version, \
run the update utility with the --reinstall option."
    fi
fi

# Setup backup directory. For safety reasons, we do not allow
# an update to be performed if this backup directory
# is not empty.
backup_dir="${top_dir}/.backup"
if [ -d "${backup_dir}" ] && [ -n "$(ls -A "${backup_dir}")" ]; then
    echo "A previously saved backup of CO𝘕CEPT is stored in \"${backup_dir}\". \
For safety reasons, I refuse to perform an update as long as this backup exist."
    trap : 0
    exit 0
fi
mkdir -p "${backup_dir}"

# Borrow some functions from the (current) installer script.
# Sourcing is no good here, as we are not interested in
# actually running the installer script.
installer_functions="             \
    check_system_dependency       \
    download                      \
    extract                       \
    set_package_manager_and_names \
    set_package_names             \
    validate_url                  \
"
function_definitions="$("${python}" -B -c "
import re, sys
with open('${installer}', 'r', encoding='utf-8') as file:
    installer_content = file.read()
for installer_function in '${installer_functions}'.split():
    print(re.search(rf'{installer_function}\(\).*?\n}}', installer_content, flags=re.DOTALL).group())
" )"
eval "${function_definitions}"

# Create dummy functions called by the borrowed functions
dummy_functions=(    \
    "disable_status" \
    "enable_status"  \
    "error"          \
    "heading"        \
    "set_status"     \
)
for dummy_function in "${dummy_functions[@]}"; do
eval "
${dummy_function}(){
    :
}"
done

# Check for needed system commands
set_package_manager_and_names
check_system_dependency "gzip" "${gzip_package}"
check_system_dependency "tar"  "${tar_package}"
check_system_dependency "wget" "${wget_package}"

# Check that the specified version of CO𝘕CEPT exists
if [[ "${version}" == *"."* ]]; then
    if [[ "${version}" != "v"* ]]; then
        version="v${version}"
    fi
fi
concept_url="https://github.com/jmd-dk/concept/archive/${version}.tar.gz"
validate_url "CONCEPT" "false"
if [ "${validate_url_status}" != "success" ]; then
    colorprint "Could not find CO𝘕CEPT version ${version} online. \
Check out https://github.com/jmd-dk/concept/ for available versions." "red"
    exit 1
fi

# Download and extract the specified version of CO𝘕CEPT
rm -rf "${top_dir}/tmp"
mkdir "${top_dir}/tmp"
download "CONCEPT"
extract "CONCEPT"

# Copy all original CO𝘕CEPT files also present in the new version
# to the backup location.
take_backup(){
    current_dir="$1"
    for file in "${current_dir}/"*; do
        if [ -d "${file}" ]; then
            take_backup "${file}"
        else
            # ${file} is a new file
            if [ -f "${top_dir}/${file}" ]; then
                # Old file with same name found.
                # Copy it to the backup directory.
                mkdir -p "${backup_dir}/$(dirname "${file}")"
                cp "${top_dir}/${file}" "${backup_dir}/${file}"
            fi
        fi
        current_dir="$1"
    done
}
for file in "${top_dir}/tmp/concept/"*; do
    if [ -d "${file}" ]; then
        cd "${file}"
        break
    fi
done
take_backup .

# Move the new update utility, as bash might crash
# if we removed the very script it is executing.
new_update_utility="./concept/utilities/update"
new_update_utility_moved="${this_file}_new"
if [ -f "${new_update_utility}" ]; then
    mv "${new_update_utility}" "${new_update_utility_moved}"
fi

# Copy new files into the installation directory,
# overwriting all files. Note that we do not include
# the hidden (.paths, .env) files.
cp -r ./* "${top_dir}/"

# Cleanup
rm -rf "${top_dir}/tmp"

# Write out success message
if [ "${version}" == "${current_version}" ]; then
    printf "
CO𝘕CEPT version \"${version}\" reinstalled
"
else
    printf "
CO𝘕CEPT updated to version ${version}
"
fi
printf "
A backup of the existing CO𝘕CEPT source code has been placed in
\"${backup_dir}\"
"
colorprint "$(basename "${this_file}") utility finished successfully" "green"

# For graceful exit
trap : 0

# As the very last thing, overwrite this file
# with its updated version.
if [ -f "${new_update_utility_moved}" ]; then
    mv "${new_update_utility_moved}" "${this_file}"
fi
