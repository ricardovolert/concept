#!/usr/bin/env bash

# This file is part of CO𝘕CEPT, the cosmological 𝘕-body code in Python.
# Copyright © 2015–2018 Jeppe Mosgaard Dakin.
#
# CO𝘕CEPT is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CO𝘕CEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CO𝘕CEPT. If not, see http://www.gnu.org/licenses/
#
# The author of CO𝘕CEPT can be contacted at dakin(at)phys.au.dk
# The latest version of CO𝘕CEPT is available at
# https://github.com/jmd-dk/concept/



# This script runs a test of the render3D utility,
# as well as the render2D functionality.
# It generates a random snapshot and 3D renders it first using 1 CPU and giving
# the render3D script the exact path to the snapshot (with and without
# specifying a render3D parameter file). Two copies of this snapshot is then
# placed in a separate directory. Using 2 CPUs, the render3D script is then
# given the path to this directory, which should produce a 3D render for each
# snapshot. Different 3D render parameters are used for the two calls to the
# render3D utility script.

# Absolute path and name of the directory of this file
this_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
this_test="$(basename "${this_dir}")"

# Set up error trapping
ctrl_c(){
    trap : 0
    exit 2
}
abort(){
    exit_code=$?
    colorprint "An error occurred during ${this_test} test!" "red"
    exit ${exit_code}
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# Cleanup from last test run
"${this_dir}/clean"

# Generate ICs
echo "$(cat "${this_dir}/params")
output_dirs  = {'snapshot': '${this_dir}/output'}
output_bases = {'snapshot': 'snapshot'}
output_times = {'snapshot': a_begin}
initial_conditions = {'name'   : 'test particles',
                      'species': 'matter particles',
                      'N'      : φ_gridsize**3,
                      }
" > "${this_dir}/ic.params"
"${concept}" -n 1                       \
             -p "${this_dir}/ic.params" \
             --local
mv "${this_dir}/output/snapshot"* "${this_dir}/output/snapshot.hdf5"

# Make copies of the snapshot
mkdir -p "${this_dir}/output/subdir"
cp "${this_dir}/output/snapshot.hdf5" "${this_dir}/output/subdir/snapshot_0.hdf5"
cp "${this_dir}/output/snapshot.hdf5" "${this_dir}/output/subdir/snapshot_1.hdf5"

# Generate two different 3D render parameter files
echo "
output_bases        = {'render3D': 'render3D'}
render3D_select     = {'all': True}
render3D_resolution = 234
render3D_colors     = {'test particles': 'g'}
render3D_bgcolor    = '0'
" > "${this_dir}/render3D.params_0"
echo "
output_bases        = {'render3D': ''}
render3D_select     = {'all': True}
render3D_resolution = 1080
render3D_colors     = {'test particles': (1, 0.2, 0.3)}
render3D_bgcolor    = 'LightYellow'
" > "${this_dir}/render3D.params_1"

# 3D render the single snapshot without explicitly specifying a 3D render parameter file
"${concept}" -n 1 -u render3D "${this_dir}/output/snapshot.hdf5" --local
mv "${this_dir}/output/render3D_snapshot.png" "${this_dir}/output/render3D_snapshot_default.png"

# 3D render the single snapshot by specifying a 3D render parameter file
"${concept}" -n 1                                           \
             -p "${this_dir}/render3D.params_0"             \
             -u render3D "${this_dir}/output/snapshot.hdf5" \
             --local

# 3D render all (both) snapshots in the subdir, using 2 processes
"${concept}" -n 2                                    \
             -p "${this_dir}/render3D.params_1"      \
             -u render3D "${this_dir}/output/subdir" \
             --local

# Analyze the output snapshots
"${concept}" -n 1                        \
             -p "${this_dir}/params"     \
             -m "${this_dir}/analyze.py" \
             --pure-python               \
             --local

# For the spectacularity of it, run a small simulation
# demonstrating 2D terminal rendering.
"${concept}" -n 1 -p "${this_dir}/params" --local

# Also demonstrate the play utility
"${concept}" -u play -c "test particles"

# Test ran successfully. Deactivate traps.
trap : 0
