#!/usr/bin/env bash

# This file is part of COùòïCEPT, the cosmological ùòï-body code in Python.
# Copyright ¬© 2015‚Äì2018 Jeppe Mosgaard Dakin.
#
# COùòïCEPT is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# COùòïCEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with COùòïCEPT. If not, see http://www.gnu.org/licenses/
#
# The author of COùòïCEPT can be contacted at dakin(at)phys.au.dk
# The latest version of COùòïCEPT is available at
# https://github.com/jmd-dk/concept/



# This script performs a comparison test between the COùòïCEPT code's PP implementation
# and the GADGET code's Tree implementation.

# Absolute path and name of the directory of this file
this_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
this_test="$(basename "${this_dir}")"

# Set up error trapping
ctrl_c(){
    trap : 0
    exit 2
}
abort(){
    exit_code=$?
    colorprint "An error occurred during ${this_test} test!" "red"
    exit ${exit_code}
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# Cleanup from last test run
"${this_dir}/clean"

# Create the Ewald grid using Cython
ewald_gridsize="$(get_param ewald_gridsize)"
select_forces="$(get_param select_forces)"
rm -f "${concept_dir}/.ewald_gridsize=${ewald_gridsize}.hdf5"
echo "ewald_gridsize = ${ewald_gridsize}" > "${this_dir}/params_ewald"
echo "select_forces = ${select_forces}" >> "${this_dir}/params_ewald"
"${concept}" -n 1 -p "${this_dir}/params_ewald" --local

# Generate ICs
echo "$(cat "${this_dir}/params")
output_dirs  = {'snapshot': '${this_dir}'}
output_bases = {'snapshot': 'IC'}
output_times = {'snapshot': a_begin}
initial_conditions = {'name'   : 'GADGET halos',
                      'species': 'matter particles',
                      'N'      : 8**3,
                      }
enable_class_background = True  # Do use CLASS when creating the initial conditions
" > "${this_dir}/ic.params"
"${concept}" -n 1                       \
             -p "${this_dir}/ic.params" \
             --local
mv "${this_dir}/IC"* "${this_dir}/IC"

# Run the COùòïCEPT code on the generated ICs
"${concept}" -n 1 -p "${this_dir}/params" --local

# Dump list of snapshot output times used by GADGET
"${python}" -B -c "import numpy as np
np.savetxt('${this_dir}/outputlist', $(get_param "snapshot_times['a']"))"

# Create an edited version of Makefile_gadget with correct parth information
cp "${this_dir}/Makefile_gadget" "${this_dir}/Makefile_gadget_edited"
sed -i "/^ *CC= / s/ [^# ]/ \"${mpicc//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${mpi_dir}/include"
sed -i "/^ *MPI_INCL= / s/ [^# ]/ \"-I${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" \
       "${this_dir}/Makefile_gadget_edited"
path="${mpi_dir}/lib"
sed -i "/^ *MPI_LIBS= / s/ [^# ]/ \"-L${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" \
       "${this_dir}/Makefile_gadget_edited"
path="${gsl_dir}/include"
sed -i "/^ *GSL_INCL= / s/ [^# ]/ \"-I${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" \
       "${this_dir}/Makefile_gadget_edited"
path="${gsl_dir}/lib"
sed -i "/^ *GSL_LIBS= / s/ [^# ]/ \"-L${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" \
       "${this_dir}/Makefile_gadget_edited"
path="${fftw_for_gadget_dir}/include"
sed -i "/^ *FFTW_INCL= / s/ [^# ]/ \"-I${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" \
       "${this_dir}/Makefile_gadget_edited"
path="${fftw_for_gadget_dir}/lib"
sed -i "/^ *FFTW_LIBS= / s/ [^# ]/ \"-L${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" \
       "${this_dir}/Makefile_gadget_edited"

# Make a local copy of the files in the GADGET2 directory and copy the edited Makefile
Gadget2_local_dir="${this_dir}/Gadget2_local"
mkdir -p "${Gadget2_local_dir}"
cp "${Gadget2_dir}/"* "${Gadget2_local_dir}" || :
cp "${this_dir}/Makefile_gadget_edited" "${Gadget2_local_dir}/Makefile"

# Build Gadget and run simulation based on the ICs.
# Note that it is crucial to use a relative path to the parameter file
# as the path has a maximum allowed length in GADGET.
(cd "${Gadget2_local_dir}" && make clean \
                           && make       \
                           && "${Gadget2_local_dir}/Gadget2" ../params_gadget)

# Analyze the output snapshots
"${concept}" -n 1 -p "${this_dir}/params" -m "${this_dir}/analyze.py" --pure-python --local

# Copy the tabulated Ewald corrections to the Gadget2 directory if it does not
# already exist there, to save time later.
if [ ! -f "${Gadget2_dir}/ewald_spc_table_64.dat" ]; then
    cp "${Gadget2_local_dir}/ewald_spc_table_64.dat" "${Gadget2_dir}/ewald_spc_table_64.dat"
fi

# Test ran successfully. Deactivate traps.
trap : 0
