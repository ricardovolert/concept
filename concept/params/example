# This is an example parameter file to the COùòïCEPT code.
# When defining parameters, the following tips and tricks may be used:
# - Parameters can be specified as any valid Python 3 expression.
# - Parameters may be defined in terms of other parameters/variables.
#   Unlike normal Python code, the order of definitions is not important.
# - Mathematical as well as NumPy functions and constants are available.
# - Physical units may and should be used where applicable.
# - Absolute paths defined in the .paths file may be accessed
#   via the paths dict. Relative paths will be understood
#   with respect to the concept directory.
# - Should you wish to define non-parameter helper variables,
#   let their name begin with an underscore in order to suppress
#   the 'unknown parameter specified' warning.
# - Repeated values in dictionaries may be succinctly declared
#   by an ellipsis (...).
# - Some parameters will be inferred from others and must not be
#   defined explicitly. Below is the complete list of such parameters.
#     h : Inferred from H0, defined to be H0/(100*km/(s*Mpc)).
#     Œ©ŒΩ: Inferred from the values of 'N_ncdm', 'deg_ncdm' and 'm_ncdm'
#         in the class_params dictionary.



# Input/output
initial_conditions = [  # Initial condition snapshot file or container of components to be generated
    {
        'name'   : 'matter component',
        'species': 'matter particles',
        'N'      : 32**3,
    },
    {
        'name'             : 'neutrino component',
        'species'          : 'neutrino fluid',
        'gridsize'         : 32,
        'boltzmann_order'  : 2,
        'boltzmann_closure': 'class',
    },
]
snapshot_type = 'standard'  # Type of output snapshots
output_dirs = {  # Directories for storing output
    'snapshot' : paths['output_dir'],
    'powerspec': ...,
    'render2D' : ...,
    'render3D' : ...,
    'autosave' : paths['ics_dir'],
}
output_bases = {  # File basenames of output
    'snapshot' : 'snapshot',
    'powerspec': 'powerspec',
    'render2D' : 'render2D',
    'render3D' : 'render3D',
}
output_times = {
    'a': {  # Scale factor values at which to dump output
        'snapshot' : logspace(log10(a_begin), log10(1), 5),
        'powerspec': ...,
        'render2D' : 1,
        'render3D' : [a_begin, 1],
    },
    't': {  # Cosmic times at which to dump output
        'snapshot' : '',
        'powerspec': '',
        'render2D' : '',
        'render3D' : '',
     },
}
autosave_interval = 12*hr  # How often to dump autosave snapshot
snapshot_select = {  # Select which components to save in snapshots
    'all': True,
}
powerspec_select = {  # Toggle power spectra computation for individual and sets of components
    'all': {'data': True, 'plot': True},
    'all combinations': {'data': True, 'plot': False},
}
render2D_select = {  # Toggle 2D rendering for individual and sets of components
    'matter component'  : {'data': False, 'image': True,  'terminal image': True},
    'neutrino component': {'data': False, 'image': False, 'terminal image': False},
}
render3D_select = {  # Toggle rendering for each component
    'all': True,
}

# Numerical parameters
boxsize          = 128*Mpc  # Linear size of the simulation box
ewald_gridsize   = 64       # Linear gridsize of the grid of Ewald corrections
œÜ_gridsize       = 32        # Linear gridsize of the potential
p3m_scale        = 1.25	    # The long/short-range force split scale
p3m_cutoff       = 4.8      # Maximum reach of short-range force
R_tophat         = 8*Mpc    # Radius of tophat used to compute œÉ
modes_per_decade = 30       # Number of linear k modes per decade computed in CLASS

# Cosmology
H0      = 70*km/(s*Mpc)  # The Hubble constant
Œ©cdm    = 0.25 - Œ©ŒΩ      # Density parameter for cold dark matter
Œ©b      = 0.05           # Density parameter for baryonic matter
a_begin = 0.02           # Scale factor at beginning of simulation
class_params = {         # CLASS parameters. See the CLASS documentation for details.
    # Primordial parameters
    'n_s'                    : 1,
    'A_s'                    : 2.30e-9,
    # Neutrino parameters
    'N_ur'                   : 0,
    'N_ncdm'                 : 1,
    'deg_ncdm'               : 3,
    'm_ncdm'                 : 1/3,
    'l_max_ncdm'             : 30,
    'Number of momentum bins': 30,
    'Maximum q'              : 15,
}

# Physics
select_forces = {  # Forces and methods which act on each component
    'all': {'gravity': 'pm'},
}
select_class_species = {  # CLASS species to use for each component
    'all': 'default',
}
select_eos_w = {  # Equation of state parameter w for each component
    'all': 'class',
}
select_boltzmann_closure = {  # Closure rule for the Boltzmann hierarchy for each component
    'all': 'class',
}
select_realization_options = {  # Realization options for each component and variable
    'all': {
        # Particle variables
        'pos': {
            'back-scaling': False,
        },
        'mom': {
            'back-scaling': False,
            'velocities from displacements': False,
        },
        # Fluid variables
        'œ±': {
            'back-scaling': False,
        },
        'J': {
            # Linear realization options
            'back-scaling': False,
            # Non-linear realization options
            'structure'     : 'primordial',
            'compound-order': 'linear',
        },
        'ùí´': ...,
        'œÇ': ...,
    },
}
select_approximations = {  # Toggle approximations for each component
    'all': {
        'P = wœÅ': False,
    },
}
select_softening_length = {  # Gravitational softening for each component
    'particles': '0.03*boxsize/cbrt(N)',
}

# Simulation options
fftw_wisdom_rigor = 'measure'  # Rigor level when acquiring FFTW wisdom
fftw_wisdom_reuse = True       # Reuse FFTW wisdom from earlier runs?
random_seed = 1                # Seed for pseudo-random numbers
fluid_scheme_select = {        # Fluid evolution scheme for each component
    'all': 'Kurganov-Tadmor',
}
fluid_options = {  # Specifications of fluid scheme parameters
    'Kurganov-Tadmor': {
        'Runge-Kutta order': {  # Order of time integration
            'all': 2,
        },
        'flux_limiter_select': {  # Flux limiter function
            'all': 'minmod',
        },
    },
    'MacCormack': {
        'vacuum_corrections_select': {  # Toggle vacuum corrections
            'all': True,
        },
        'max_vacuum_corrections_select': {  # Max number of vacuum corrections in the two MacCormack steps
            'all': (1, 'gridsize'),
        },
        'foresight_select': {  # Number of time steps to look ahead when doing vacuum corrections
            'all': 30,
        },
        'smoothing_select': {  # Amount of smoothing to apply when doing vacuum correction
            'all': 1,
        },
    },
}
class_k_max = {}                  # Maximum trusted k for individual perturbations
class_reuse = True                # Reuse CLASS results from earlier runs?
class_plot_perturbations = False  # Plot CLASS perturbations?
class_extra_background = {}       # Extra CLASS background variables to dump
class_extra_perturbations = {}    # Extra CLASS perturbations to dump

# Graphics
terminal_width = 80  # Maximum width of terminal output, in characters
suppress_output = {  # Suppress terminal output matching these regexes
    'out': (),
    'err': (),
    'all': (),
}
render2D_options = {  # Specifications of 2D renders for individual and sets of components
    'axis': {  # Projection axis
        'all': 'z',
        'all combinations': ...,
    },
    'extend': {  # Length or interval to include along the projected axis
        'all': 0.1*boxsize,
        'all combinations': ...,
    },
    'terminal resolution': {  # Resolution (in characters) of terminal images
        'all': min(œÜ_gridsize, terminal_width),
        'all combinations': ...,
    },
    'colormap': {  # Colormap for 2D render images and terminal images
        'all': 'inferno',
        'all combinations': ...,
    },
    'enhance': {  # Toggle non-linear contrast enhancement of 2D render images and terminal images
        'all': True,
        'all combinations': ...,
    },
}
render3D_colors = {  # Color to use in 3D renders for each component
    'matter component': 'lime',
    'neutrino component': 'r',
}
render3D_bgcolor    = 'black'  # Background color of 3D renders
render3D_resolution = 1080     # The height and width of 3D renders

# System of units
unit_length = 'Mpc'      # Physical length corresponding to a numerical value of 1.0
unit_time   = 'Gyr'      # Physical time   corresponding to a numerical value of 1.0
unit_mass   = '10¬π‚Å∞ m‚òâ'  # Physical mass   corresponding to a numerical value of 1.0

# Debugging options
enable_Hubble           = True   # Enable Hubble expansion
enable_class_background = True   # Use CLASS to compute the evolution of the background
enable_debugging        = False  # Enable debugging mode

